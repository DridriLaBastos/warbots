;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
globals [ count_ ]

;fonction atan(x), netlogo ne fournit que atan(x,y)
to-report atan1 [ x ]
  report atan x 1
end

to goRedExplorer
end

to goRedRocketLauncher
end

to dridriTeamForwardMove
  let i 0
  while [ free-ahead? speed != nobody and i < 12]
  [
    rt 30
    set i i + 1
  ]
  
  if free-ahead? speed = nobody [ forward-move speed ]
end

to-report dridriTeamGetBreedCost [ b ]
  if b = Harvesters [ report harvester-cost ]
  if b = Explorers  [ report explorer-cost ]
  if b = RocketLaunchers [ report rocket-launcher-cost ]
end

to dridriTeamRandomMove
  random-move
end

to dridriTeamHarvesterSearchFood
  let f min-one-of perceive-food [ distance myself ]

  while [(f != nobody) and (distance f <= 2)] [
    take-food f
    set f min-one-of perceive-food [ distance myself ]
  ]
  
  ;Retourner à la base pour une certaine quantité de nourriture transportée
  if carrying-food? >= 2000
  [ set mem0 1 ]
  
  ifelse f != nobody
  [
    set heading towards f
    dridriTeamForwardMove
  ]
  [ dridriTeamRandomMove ]
  
  if mem1 = 1
  [
    let b min-one-of my-bases [ distance myself ]
    
    if distance b >= 2 * missile-range
    [ set heading towards b ]
  ]
end

to dridriTeamHarvesterFeedBase
  let targetBase min-one-of my-bases [ distance myself ]
  set heading towards targetBase
  
  ;Plantage des graines dans les patches qui en ont le moins
  if (distance targetBase <= missile-range) and (mem2 < 10)
  [ 
    ifelse mem3 = 0
    [
      let minSeed min-one-of neighbors with [ distance targetBase < missile-range ] [ count Seeds-here ]
      ;ask minSeed [ set pcolor green ]
      set mem3 list [pxcor] of minSeed [pycor] of minSeed
    ]
    [
      let patchM3 patch (item 0 mem3) (item 1 mem3)
      let currentPatch patch-here
      
      ifelse currentPatch = patchM3
      [
        plant-seeds color max-seeds
        set mem3 0
        set mem2 mem2 + 1
      ]
      [ set heading towards patchM3 ]
    ]
  ]
  
  ;On s'approche de la base jusqu'a la distance maximale à laquelle il est possible de lui donner de la nourriture puis on lui donne
  ; et l'on repart à la recherche de nourriture
  if distance targetBase <= 2
  [
    set givenThisTick givenThisTick + carrying-food?
    set howManyGive howManyGive + 1
    give-food targetBase carrying-food?
   ;Repare à la recherche de nourriture 
    set mem0 0
    set mem1 1;A partir du moment où l'on a nourrit une base on reste dans son périmètre
    set mem2 0
    set mem3 0
  ]
  
  dridriTeamForwardMove
end

;Se déplace aléatoirement. Quand ils trouvent de la nourriture en donne 80% à la base et plante ce qui reste
to goRedHarvester
  if mem0 = 0 [ dridriTeamHarvesterSearchFood ]
  if mem0 = 1 [ dridriTeamHarvesterFeedBase ]
end

to dridriTeamBaseRequests [ n b ]
  if b = Harvesters [ set mem0 max (list 0 (mem0 + n)) ]
  if b = RocketLaunchers [ set mem1 max (list mem1 (mem1 + n)) ]
  if b = Explorers [ set mem2 max (list 0 (mem2 + n)) ]
end

to dridriTeamBaseRequestHarvesters [ n ] dridriTeamBaseRequests n Harvesters end
to dridriTeamBaseRequestExplorers [ n ] dridriTeamBaseRequests n Explorers end

;Si le nombre d'harvesters est plus petit qu'une certaines valeur, recréer des harvesters
to dridriTeamBaseConditionalyRequestHarvester
  let harvesterThreshold 5
  let harvesterNumber count perceive-specific-robots color Harvesters
  if harvesterNumber < harvesterThreshold
  [ dridriTeamBaseRequestHarvesters 1 ]
end

to dridriTeamBaseRequestSoldiers [ n ]
  dridriTeamBaseRequests n RocketLaunchers
  type self type " requested " type n print " soldiers"
end

to-report dridriTeamComputeFactor [ de ]
  report atan1 de / 360
end
;La quantité de soldat a créer dépend de l'énergie que la base à reçu sur 100 ticks.
;L'idée est d'utiliser une fraction de l'énergie reçu pour créer des soldats.
;Au fur et à mesure que le temps avance, une fraction du plus en plus importante de l'énergie reçue sera utilisé car de plus en plus d'énergie est créée.
;Au max 60% de l'énergie gagnée sur 100 ticks sera utilisée pour créer de nouveaux soldats. Ceci afin de pouvoir toujours avoir une quantité d'énergie qui augmente.

;Si on a perdu de l'énergie  alors on enlèvera des soldats de la file d'attente
to dridriTeamBaseConditionalyRequestSoldier
  ifelse mem10 > 0
  [ set mem10 mem10 - 1 ]
  [
    ;Dans netlogo atant est dabs l'intervalle [0; 360], donc toujours positif. A la différence du vrai arctan qui peut être négatif
    let dEnergy energy - mem11;La variation d'énergie entre il y a 100 ticks et maintenant
    let f 0.60 * dridriTeamComputeFactor dEnergy
    let newSoldierAmount f * dEnergy / dridriTeamGetBreedCost RocketLaunchers
    
    if mem9 = 1
    [
     type self type "dE=" type dEnergy type "   f=" type f type "   s=" type newSoldierAmount type "\n"
    ]
    
    let soldierAmountToRequest floor newSoldierAmount
    
    if newSoldierAmount < 0
    [ set soldierAmountToRequest  int newSoldierAmount ]
    
    if soldierAmountToRequest != 0
    [ dridriTeamBaseRequestSoldiers soldierAmountToRequest ]
    set mem10 100
    set mem11 energy;
  ]
end

to dridriTeamBaseConditionalyRequestExplorer
end

to dridriTeamBaseConditionalyRequestBots
  dridriTeamBaseConditionalyRequestHarvester
  dridriTeamBaseConditionalyRequestSoldier
  ;dridriTeamBaseConditionalyRequestExplorer
end

to dridriTeamBaseCreateHarvester
  if mem0 > 0
  [
    new-Harvester self
    set mem0 mem0 - 1
  ]
end

to dridriTeamBaseCreateRLauncher
  if mem1 > 0
  [
    new-RocketLauncher self
    set mem1 mem1 - 1
  ]
end

to dridriTeamBaseCreateExplorer
  if mem2 > 0
  [
    new-Explorer self
    set mem2 mem2 - 1
  ]
end

to dridriTeamBaseCreateBots
  dridriTeamBaseCreateHarvester
  dridriTeamBaseCreateRLauncher
  dridriTeamBaseCreateExplorer
end

to dridriTeamBaseLaunchFAF
   let missileLaunchThreshold (min list missile-range detection-range) * .66
  
  ;Détection de tous les lanceurs de missiles ennemis à proximité
  let ennemyTarget min-one-of (perceive-specific-robots ennemy RocketLaunchers) with [distance myself <= missileLaunchThreshold] [distance myself]
  
  ;Si l'on a trouvé un lanceur de missile on tire dessus quoi qu'il arrive.
  ;Sinon on tire sur les énemis avec une probabilité d'autant plus grande qu'il est loin de la base
  ifelse ennemyTarget != nobody
  [
    if nb-fafs = 0
    [new-faf 1]
    
    launch-faf ennemyTarget
  ]
  [
    set ennemyTarget min-one-of (perceive-robots ennemy) with [distance myself <= missileLaunchThreshold] [distance myself]
    
    if ennemyTarget != nobody
    [
      let probabilityNumber random-float missileLaunchThreshold
      
      if probabilityNumber >= distance ennemyTarget
      [
        if nb-fafs = 0
        [ new-faf 1 ]

        launch-faf ennemyTarget
      ]
    ]
  ]
end

to goRedBase
  dridriTeamBaseConditionalyRequestBots
  dridriTeamBaseCreateBots

  dridriTeamBaseLaunchFAF
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
end

;; procedure pour initialiser les bases rougesinifinie
to initRedBase
  set mem0 15
  set mem10 100
  set mem11 energy
  if printCount = 0
  [
    set mem9 1
    set printCount 1
  ]
  set count_ 1
end

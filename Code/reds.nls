;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
globals [ count_ foodToGiveAmount ]

to goRedExplorer
end

to goRedRocketLauncher
end

to dridriTeamForwardMove
  let i 0
  while [ free-ahead? speed != nobody and i < 12]
  [
    rt 30
    set i i + 1
  ]
  
  if free-ahead? speed = nobody [ forward-move speed ]
  
end

to dridriTeamRandomMove
  random-move
end

to-report dridriTeamGetBreedCost [ b ]
  if b = Harvesters [ report harvester-cost ]
  if b = Explorers  [ report explorer-cost ]
  if b = RocketLaunchers [ report rocket-launcher-cost ]
end

to dridriTeamHarvesterPlantSeeds [ B ]
  if (distance B <= missile-range) and (breed = Harvesters) and (mem2 > 0)
  [
    ifelse mem3 = 0
    [
      let minSeed min-one-of neighbors with [ distance B < missile-range ] [ count Seeds-here ]
      set mem3 list [pxcor] of minSeed [pycor] of minSeed
    ]
    [
      let patchM3 patch (item 0 mem3) (item 1 mem3)
      let currentPatch patch-here
      
      ifelse currentPatch = patchM3
      [
        plant-seeds color max-seeds
        set mem3 0
        set mem2 mem2 - 1
      ]
      [ set heading towards patchM3 ]
    ]
  ]
end

to dridriTeamHarvesterFeedBase [ B ]
  if (distance B <= 2) and (breed = Harvesters)
  [
    give-food B carrying-food?
   ;Repare à la recherche de nourriture 
    set mem0 0
    set mem1 1;A partir du moment où l'on a nourrit une base on reste dans son périmètre
    set mem3 0
  ]
end

to dridriTeamRegainEnergy [ br ba ]
  let energyCost dridriTeamGetBreedCost br
  
  if energy < energyCost * .25
  [ ask ba [ give-energy myself energyCost - energy ] ]
end

to dridriTeamGoToBase
  ;Selecting a base
  let targetBase min-one-of my-bases [ distance myself ]
  set heading towards targetBase
  
  dridriTeamHarvesterPlantSeeds targetBase
  
  dridriTeamForwardMove
  
  dridriTeamHarvesterFeedBase targetBase
  dridriTeamRegainEnergy breed targetBase
end

to dridriTeamHarvesterSearchFood
  let f min-one-of perceive-food [ distance myself ]

  while [(f != nobody) and (distance f <= 2)] [
    take-food f
    set f min-one-of perceive-food [ distance myself ]
  ]
  
  ;Retourner à la base pour une certaine quantité de nourriture transportée
  if carrying-food? >= 2000
  [
    set mem0 1
    set mem2 10
  ]
  
  ifelse f != nobody
  [
    set heading towards f
    dridriTeamForwardMove
  ]
  [ dridriTeamRandomMove ]
  
  if mem1 = 1
  [
    let b min-one-of my-bases [ distance myself ]
    
    if distance b >= 2 * missile-range
    [ set heading towards b ]
  ]
end

;Se déplace aléatoirement. Quand ils trouvent de la nourriture en donne 80% à la base et plante ce qui reste
to goRedHarvester
  if mem0 = 0 [ dridriTeamHarvesterSearchFood ]
  if mem0 = 1 [ dridriTeamGoToBase ]
end

to dridriTeamCreateHarvesters
  if mem0 != 0
  [
    new-Harvester self
    set mem0 mem0 - 1
  ]
end

to dridriTeamCreateExplorers
  if mem1 != 0
  [
    new-Harvester self
    set mem1 mem1 - 1
  ]
end

to dridriTeamCreateRLaunchers
  if mem2 != 0
  [
    new-Harvester self
    set mem2 mem2 - 1
  ]
end

to dridriTeamAsk [ b n ]
  if b = Harvesters [ set mem0 (mem0 + n) ]
  if b = Explorers [ set mem1 (mem1 + n) ]
  if b = RocketLaunchers [ set mem2 (mem2 + n) ]
end


;Si le nombre d'harvesters est plus petit qu'une certaines valeur, recréer des harvesters
to dridriTeamAskHarvesterCreationIfLow
  let harvesterThreshold 5
  let harvesterNumber count perceive-specific-robots color Harvesters
  if harvesterNumber < harvesterThreshold
  [ dridriTeamAsk Harvesters 1 ]
end

to dridriTeamCreateBots
  dridriTeamCreateHarvesters
  dridriTeamCreateExplorers
  dridriTeamCreateRLaunchers
end

to goRedBase
  dridriTeamAskHarvesterCreationIfLow
  dridriTeamCreateBots
  let missileLaunchThreshold (min list missile-range detection-range) * .66
  
  ;Détection de tous les lanceurs de missiles ennemis à proximité
  let ennemyTarget min-one-of (perceive-specific-robots ennemy RocketLaunchers) with [distance myself <= missileLaunchThreshold] [distance myself]
  
  ;Si l'on a trouvé un lanceur de missile on tire dessus quoi qu'il arrive.
  ;Sinon on tire sur les énemis avec une probabilité d'autant plus grande qu'il est loin de la base
  ifelse ennemyTarget != nobody
  [
    if nb-fafs = 0
    [new-faf 1]
    
    launch-faf ennemyTarget
  ]
  [
    set ennemyTarget min-one-of (perceive-robots ennemy) with [distance myself <= missileLaunchThreshold] [distance myself]
    
    if ennemyTarget != nobody
    [
      let probabilityNumber random-float missileLaunchThreshold
      
      if probabilityNumber >= distance ennemyTarget
      [
        if nb-fafs = 0
        [new-faf 1]

        launch-faf ennemyTarget
      ]
    ]
  ]
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
end

;; procedure pour initialiser les bases rougesinifinie
to initRedBase
  dridriTeamAsk Harvesters 15
  set count_ 1
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
globals [ count_ foodToGiveAmount ]

to red-team-ask-for-energy [ b n ]
  ask b [ if (energy > 6000) [ give-energy myself n ]]
end

to red-team-go-back-to-base
  if (carrying-food? > 1000) or (energy < 500) or ((Breed = RocketLaunchers) and (nb-missiles = 0))
  [
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 1000) [ give-food b carrying-food? ]
        if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          red-team-ask-for-energy b 500
          new-missile 5
        ]
      ]
      [
        set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
    ]    
  ]
end

to red-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to red-team-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance self ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take-food b ]
      [ set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
  ]
  [ random-move ]
end

to-report red-team-no-target?
  report mem5 = 0
end

to red-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to red-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ red-team-set-target x y espece ]]
end

to red-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to red-team-select-target
  if (red-team-no-target?)
  [
    let h min-one-of perceive-robots ennemy [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to red-team-shoot 
  if (not red-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  
end

to goRedExplorer
  ;red-team-go-back-to-base
  ;red-team-go-and-eat

  ;ifelse (not red-team-no-target?) [
  ;  red-team-call-rocket-launcher mem0 mem1 mem2
  ;  red-team-call-explorer mem0 mem1 mem2
  ;]
  ;[ let h one-of perceive-robots ennemy
  ;  if ( h != nobody ) [ red-team-call-rocket-launcher [xcor] of h [ycor] of h [breed] of h]
  ;]
  
end

to goRedRocketLauncher
  red-team-go-back-to-base
  red-team-select-target
  red-team-shoot
  red-team-go-and-eat

  if ((energy > 3000) and (nb-missiles < 5)) [ new-missile 1 ]
end

to dridriTeamForwardMove
  ;let speedToMove 0
  ;let exit False
  
  ;while [ (speedToMove != speed) and not exit ]
  ;[
  ;  if free-ahead? speedToMove != nobody
  ;  [ set exit True ]
  ;  
  ;  if not exit
  ;  [ set speedToMove (speedToMove + 1) ]
  ;]
  let i 0
  while [ free-ahead? speed != nobody and i < 12]
  [
    rt 30
    set i i + 1
  ]
  
  if free-ahead? speed = nobody [ forward-move speed ]
  
end

to dridriTeamRandomMove
  ;right -20 + random 40
  ;dridriTeamForwardMove
  
  random-move
end

to-report dridriTeamGetBreedCost [ b ]
  if b = Harvesters [ report harvester-cost ]
  if b = Explorers  [ report explorer-cost ]
  if b = RocketLaunchers [ report rocket-launcher-cost ]
end

to dridriTeamHarvesterPlantSeeds [ B ]
  if (distance B <= missile-range) and (breed = Harvesters) and (mem2 > 0)
  [
    ifelse mem3 = 0
    [
      let minSeed min-one-of neighbors with [ distance B < missile-range ] [ count Seeds-here ]
      set mem3 list [pxcor] of minSeed [pycor] of minSeed
    ]
    [
      let patchM3 patch (item 0 mem3) (item 1 mem3)
      let currentPatch patch-here
      
      ifelse currentPatch = patchM3
      [
        plant-seeds color max-seeds
        set mem3 0
        set mem2 mem2 - 1
      ]
      [ set heading towards patchM3 ]
    ]
  ]
end

to dridriTeamHarvesterFeedBase [ B ]
  if (distance B <= 2) and (breed = Harvesters)
  [
    give-food B carrying-food?
   ;Repare à la recherche de nourriture 
    set mem0 0
    set mem1 1;A partir du moment où l'on a nourrit une base on reste dans son périmètre
    set mem3 0
  ]
end

to dridriTeamRegainEnergy [ br ba ]
  let energyCost dridriTeamGetBreedCost br
  
  if energy < energyCost * .25
  [ ask ba [ give-energy myself energyCost - energy ] ]
end

to dridriTeamGoToBase
  ;Selecting a base
  let targetBase min-one-of my-bases [ distance myself ]
  set heading towards targetBase
  
  dridriTeamHarvesterPlantSeeds targetBase
  
  dridriTeamForwardMove
  
  dridriTeamHarvesterFeedBase targetBase
  dridriTeamRegainEnergy breed targetBase
end

to dridriTeamHarvesterSearchFood
  let f min-one-of perceive-food [ distance myself ]

  while [(f != nobody) and (distance f <= 2)] [
    take-food f
    set f min-one-of perceive-food [ distance myself ]
  ]
  
  ;Retourner à la base pour une certaine quantité de nourriture transportée
  if carrying-food? >= 2000
  [
    set mem0 1
    set mem2 5
  ]
  
  ifelse f != nobody
  [
    set heading towards f
    dridriTeamForwardMove
  ]
  [ dridriTeamRandomMove ]
  
  if mem1 = 1
  [
    let b min-one-of my-bases [ distance myself ]
    
    if distance b >= 2 * missile-range
    [ set heading towards b ]
  ]
end

;Se déplace aléatoirement. Quand ils trouvent de la nourriture en donne 80% à la base et plante ce qui reste
to goRedHarvester
  if mem0 = 0 [ dridriTeamHarvesterSearchFood ]
  if mem0 = 1 [ dridriTeamGoToBase ]
end

to dridriTeamCreateHarvesters
  if mem0 != 0
  [
    new-Harvester self
    set mem0 mem0 - 1
  ]
end

to dridriTeamCreateExplorers
  if mem1 != 0
  [
    new-Harvester self
    set mem1 mem1 - 1
  ]
end

to dridriTeamCreateRLaunchers
  if mem2 != 0
  [
    new-Harvester self
    set mem2 mem2 - 1
  ]
end

to dridriTeamAsk [ b n ]
  if b = Harvesters [ set mem0 (mem0 + n) ]
  if b = Explorers [ set mem1 (mem1 + n) ]
  if b = RocketLaunchers [ set mem2 (mem2 + n) ]
end


;Si le nombre d'harvesters est plus petit qu'une certaines valeur, recréer des harvesters
to dridriTeamAskHarvesterCreationIfLow
  let harvesterThreshold 5
  let harvesterNumber count perceive-specific-robots color Harvesters
  if harvesterNumber < harvesterThreshold
  [ dridriTeamAsk Harvesters 1 ]
end

to dridriTeamCreateBots
  dridriTeamCreateHarvesters
  dridriTeamCreateExplorers
  dridriTeamCreateRLaunchers
end

to goRedBase
  dridriTeamAskHarvesterCreationIfLow
  dridriTeamCreateBots
  let missileLaunchThreshold (min list missile-range detection-range) * .66
  
  ;Détection de tous les lanceurs de missiles ennemis à proximité
  let ennemyTarget min-one-of (perceive-specific-robots ennemy RocketLaunchers) with [distance myself <= missileLaunchThreshold] [distance myself]
  
  ;Si l'on a trouvé un lanceur de missile on tire dessus quoi qu'il arrive.
  ;Sinon on tire sur les énemis avec une probabilité d'autant plus grande qu'il est loin de la base
  ifelse ennemyTarget != nobody
  [
    if nb-fafs = 0
    [new-faf 1]
    
    launch-faf ennemyTarget
  ]
  [
    set ennemyTarget min-one-of (perceive-robots ennemy) with [distance myself <= missileLaunchThreshold] [distance myself]
    
    if ennemyTarget != nobody
    [
      let probabilityNumber random-float missileLaunchThreshold
      
      if probabilityNumber >= distance ennemyTarget
      [
        if nb-fafs = 0
        [new-faf 1]

        launch-faf ennemyTarget
      ]
    ]
  ]
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
end

;; procedure pour initialiser les bases rougesinifinie
to initRedBase
  dridriTeamAsk Harvesters 15
  set count_ 1
end

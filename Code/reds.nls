;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
globals [ count_ foodToGiveAmount ]

to dridriTeamForwardMove
  let i 0
  while [ free-ahead? speed != nobody and i < 12]
  [
    rt 30
    set i i + 1
  ]
  
  if free-ahead? speed = nobody [ forward-move speed ]
end

to dridriTeamRandomMove
  random-move
end

to dridriTeamExplorerSearchEnemyBases
  dridriTeamRandomMove
  let enemyBase one-of perceive-base ennemy
  
  if enemyBase != nobody
  [
    set mem0 1
    set mem1 enemyBase
    set mem2 min-one-of my-bases [ distance myself ]
  ]
end

;On récupère une base qui n'a pas de coodonnées pour les bases énemies
to dridriTeamExplorerRevealEnemyBase
  set heading towards mem2
  dridriTeamForwardMove
  
  ; Une fois que l'on est arrivé à distance de communication d'une base, on vérifie qu'elle ne contient pas déjà la position
  ; de la base que l'on contient et on lui donne cette info
  ; dans tous les cas on se dirige vers la base suivante pour lui passer la position de la base que l'on a trouvé
  if distance mem2 <= detection-range
  [
    let enemyBases [mem10] of mem2
    
    ifelse enemyBases = 0
    [ set enemyBases (list mem1) ]
    [ if (length enemyBases = 1) and (item 0 enemyBases != mem1) [ set enemyBases lput mem1 enemyBases ] ]
    
    ask mem2 [ set mem10 enemyBases ]
    set mem2 one-of my-bases with [ self != [mem2] of myself ]
    set mem3 (mem3 + 1)
    if mem3 = 2
    [
      set mem0 0
      set mem3 0
    ]
  ]
end

to goRedExplorer
  if mem0 = 0 [ dridriTeamExplorerSearchEnemyBases ]
  if mem0 = 1 [ dridriTeamExplorerRevealEnemyBase ]
end

to goRedRocketLauncher

end

to dridriTeamHarvesterSearchFood
  let f min-one-of perceive-food [ distance myself ]

  while [(f != nobody) and (distance f <= 2)] [
    take-food f
    set f min-one-of perceive-food [ distance myself ]
  ]
  
  ;Retourner à la base pour une certaine quantité de nourriture transportée
  if carrying-food? >= mem4
  [
    set mem0 1
    set mem4 2000
  ]
  
  ifelse f != nobody
  [
    set heading towards f
    dridriTeamForwardMove
  ]
  [ dridriTeamRandomMove ]
  
  if mem1 = 1
  [
    let b min-one-of my-bases [ distance myself ]
    
    if distance b >= 2 * missile-range
    [ set heading towards b ]
  ]
end

to dridriTeamHarvesterFeedBase
  let targetBase min-one-of my-bases [ distance myself ]
  set heading towards targetBase
  
  ;Plantage des graines dans les patches qui en ont le moins
  if (distance targetBase <= missile-range) and (mem2 < 10)
  [ 
    ifelse mem3 = 0
    [
      let minSeed min-one-of neighbors with [ distance targetBase < missile-range ] [ count Seeds-here ]
      ;ask minSeed [ set pcolor green ]
      set mem3 list [pxcor] of minSeed [pycor] of minSeed
    ]
    [
      let patchM3 patch (item 0 mem3) (item 1 mem3)
      let currentPatch patch-here
      
      ifelse currentPatch = patchM3
      [
        plant-seeds color max-seeds
        set mem3 0
        ;ask patchM2 [ set pcolor black ]
        set mem2 mem2 + 1
      ]
      [ set heading towards patchM3 ]
    ]
  ]
  
  ;On s'approche de la base jusqu'a la distance maximale à laquelle il est possible de lui donner de la nourriture puis on lui donne
  ; et l'on repart à la recherche de nourriture
  if distance targetBase <= 2
  [
    give-food targetBase carrying-food?
   ;Repare à la recherche de nourriture 
    set mem0 0
    set mem1 1;A partir du moment où l'on a nourrit une base on reste dans son périmètre
    set mem2 0
    set mem3 0
  ]
  
  dridriTeamForwardMove
end

;Se déplace aléatoirement. Quand ils trouvent de la nourriture en donne 80% à la base et plante ce qui reste
to goRedHarvester
  if mem0 = 0 [ dridriTeamHarvesterSearchFood ]
  if mem0 = 1 [ dridriTeamHarvesterFeedBase ]
end

to dridriTeamCreateHarvesters
  if mem0 != 0
  [
    new-Harvester self
    set mem0 mem0 - 1
  ]
end

to dridriTeamCreateExplorers
  if mem1 != 0
  [
    new-Explorer self
    set mem1 mem1 - 1
  ]
end

to dridriTeamCreateRLaunchers
  if mem2 != 0
  [
    new-RocketLauncher self
    set mem2 mem2 - 1
  ]
end

to dridriTeamAskHarvesters [ n ]
  set mem0 (mem0 + n)
end

;Si le nombre d'harvesters est plus petit qu'une certaines valeur, recréer des harvesters
to dridriTeamAskHarvesterCreationIfLow
  ;let harvesterThreshold 5
  ;let harvesterNumber count perceive-specific-robots color Harvesters
  ;if harvesterNumber < harvesterThreshold
  ;[ dridriTeamAskHarvesters 1 ]
end

to dridriTeamCreateBots
  dridriTeamCreateHarvesters
  dridriTeamCreateExplorers
  dridriTeamCreateRLaunchers
end

to goRedBase
  dridriTeamAskHarvesterCreationIfLow
  dridriTeamCreateBots
  let missileLaunchThreshold (min list missile-range detection-range) * .66
  
  ;Détection de tous les lanceurs de missiles ennemis à proximité
  let ennemyTarget min-one-of (perceive-specific-robots ennemy RocketLaunchers) with [distance myself <= missileLaunchThreshold] [distance myself]
  
  ;Si l'on a trouvé un lanceur de missile on tire dessus quoi qu'il arrive.
  ;Sinon on tire sur les énemis avec une probabilité d'autant plus grande qu'il est loin de la base
  ifelse ennemyTarget != nobody
  [
    if nb-fafs = 0
    [new-faf 1]
    
    launch-faf ennemyTarget
  ]
  [
    set ennemyTarget min-one-of (perceive-robots ennemy) with [distance myself <= missileLaunchThreshold] [distance myself]
    
    if ennemyTarget != nobody
    [
      let probabilityNumber random-float missileLaunchThreshold
      
      if probabilityNumber >= distance ennemyTarget
      [
        if nb-fafs = 0
        [new-faf 1]

        launch-faf ennemyTarget
      ]
    ]
  ]
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
  set mem4 500
end

;; procedure pour initialiser les bases rougesinifinie
to initRedBase
  if count_ < 1
  [
    set mem1 1
    set count_ 50
  ]
end
